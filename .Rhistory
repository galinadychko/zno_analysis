return(t(results))
},
predict_in_parallel = function(X_test, h){
n_rows <- length(X_test)
list_of_parts <- split_k_parts(k = 3, nrows = n_rows)
res <- foreach(each_part = list_of_parts,
.combine = list,
.multicombine = TRUE,
.export = "self") %dopar% {
self$predict(X_test[as.vector(each_part)], h)
}
return(do.call(rbind, res))
}
)
)
gnw <- GeneralisedNadarayaWatson$new()
gnw$train(X, Y, W)
Xtest <- as.vector(cv_small[[1]][, "math"])
prediction_no_parallel <- gnw$predict(Xtest, 1)
prediction_in_parallel <- gnw$predict_in_parallel(Xtest, 1)
stopCluster(cl)
prediction_in_parallel
prediction_no_parallel
all(prediction_in_parallel == prediction_no_parallel)
stopCluster(cl)
source("tools/GeneralizedNadarayaWatson.R")
df <- read.csv2(file ="/home/administrator/workplace/univ/ZNOandVoating/input.csv", header=FALSE, sep=";", dec=",")
names(df) <- c("ukr","math", "pro-ukr", "radical", "oposition", "small", "not_voted")
head(df)
source("tools/DataSplitTools.R")
source("tools/DataSplitTools.R")
source("tools/DataSplitTools.R")
source("tools/DataSplitTools.R")
df <- read.csv2(file ="/home/administrator/workplace/univ/ZNOandVoating/input.csv", header=FALSE, sep=";", dec=",")
names(df) <- c("ukr","math", "pro-ukr", "radical", "oposition", "small", "not_voted")
head(df)
source("tools/DataSplitTools.R")
source("tools/DataSplitTools.R")
cv_split <- cross_validation_split(df)
cv_small <- list("1" = cv_split[[1]][1:20, ], "2"=cv_split[[2]][1:20, ])
Xtest <- as.vector(cv_small[[1]][, "math"])
X<- as.vector(cv_small[[1]][, "math"]); Y <- as.vector(cv_small[[1]][, "ukr"]); W <- as.matrix(cv_small[[1]][, -c(1, 2)])
gnw <- GeneralisedNadarayaWatson()
source("tools/GeneralizedNadarayaWatson.R")
gnw <- GeneralisedNadarayaWatson()
source("tools/GeneralizedNadarayaWatson.R")
gnw <- GeneralisedNadarayaWatson$new()
gnw$train(X, Y, W)
pred_no_parallel <- gnw$predict(X_test, 1)
pred_no_parallel <- gnw$predict(Xtest, 1)
pred_no_parallel
gnw$run_cluster()
pred_in_parallel <- gnw$predict_in_parallel(Xtest, 1)
gnw$stop_cluster()
pred_in_parallel
source("tools/DataSplitTools.R")
source("tools/GeneralizedNadarayaWatson.R")
df <- read.csv2(file ="/home/administrator/workplace/univ/ZNOandVoating/input.csv", header = FALSE, sep = ";",dec=',')
names(df) <- c("ukr", "math", "pro-ukr", "radical", "oposition", "small", "not_voted")
head(df)
cv_split <- cross_validation_split(df)
cv_small <- list("1"=cv_split[[1]][1:20, ], "2"=cv_split[[2]][1:20, ])
X<- as.vector(cv_small[[1]][, "math"]); Y <- as.vector(cv_small[[1]][, "ukr"]); W <- as.matrix(cv_small[[1]][, -c(1, 2)])
Xtest <- as.vector(cv_small[[1]][, "math"])
gnw <- GeneralisedNadarayaWatson$new()
gnw$train(X, Y, W)
pr_no_parallel <- gnw$predict(Xtest, 1)
gnw$run_cluster()
gnw$max_threads
registerDoParallel(gnw$max_threads, type = "FORK")
registerDoParallel(3, type = "FORK")
library(foreach)
library(doParallel)
registerDoParallel(3, type = "FORK")
registerDoParallel(3)
sink("/home/administrator/new_file.R")
source("tools/DataSplitTools.R")
source("tools/GeneralizedNadarayaWatson.R")
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro-ukr", "radical", "oposition", "small", "not_voted")
head(df)
cv_split <- cross_validation_split(df)
X <- as.vector(cv_split[[1]][, "math"])
Y <- as.vector(cv_split[[1]][, "ukr"])
W <- as.matrix(cv_split[[1]][, -c(1, 2)])
Xtest <- as.vector(cv_split[[2]][, "math"])
gnw <- GeneralisedNadarayaWatson$new()
gnw$train(X, Y, W)
gnw$run_cluster()
system.time({
pr1 <- gnw$predict_in_parallel(Xtest, 1)
})
gnw$stop_cluster()
W2 <- cv_split[[2]][, -c(1, 2)]
head(W2)
W2 <- as.data.frame(W2)
W2[, "max_value"] <- apply(W2, 1, max)
pro_ukr <- cv_split[[2]][W2[, "pro-ukr"] == W2["max_value"], ]
head(pro_ukr)
plot(as.vector(pro_ukr[, "math"]), as.vector(pro_ukr[, "ukr"]))
head(pro_ukr)
rownames(pro_ukr)
gnw$stop_cluster()
points(pro_ukr[, "math"], pr1[rownames(pro_ukr), 1], col = "red")
head(pr1)
rownames(pr1) <- rownames(cv_split[[2]])
head(pr1)
points(pro_ukr[, "math"], pr1[rownames(pro_ukr), 1], col = "red")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
df <- df[df$math == 0,]
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "oposition", "small", "not_voted")
head(df)
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "oposition", "small", "not_voted")
head(df)
df <- df[df$math == 0,]
plot_ly(data = df, x = ~math, y = ~ukr)
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "oposition", "small", "not_voted")
head(df)
df <- df[df$math != 0,]
df <- df[df$math != 0,]
plot_ly(data = df, x = ~math, y = ~ukr, mode="markers")
plot_ly(data = df, x = ~math, y = ~ukr, mode="markers", type="scatter")
apply(df[, 1, 2], 2, min)
apply(df[, c(1, 2)], 2, min)
# df[, c(1, 2)] <- df[, c(1, 2)]/200
df[, "math"] <- (df[, "math"] - 100)/200
df[, "ukr"] <- df[, "ukr"]/200
library(plotly)
source("tools/DataSplitTools.R")
source("tools/GeneralizedNadarayaWatson.R")
cv_split <- cross_validation_split(df)
part1 <- cv_split[[1]]
part2 <- cv_split[[2]]
remove(cv_split)
prediction1 <- read.csv("/home/administrator/workplace/univ/zno_project/pred1.csv")
head(prediction1)
prediction1 <- read.csv("/home/administrator/workplace/univ/zno_project/pred1.csv", row.names = TRUE)
prediction1 <- read.csv("/home/administrator/workplace/univ/zno_project/pred1.csv", row.names = 1)
head(prediction1)
library(plotly)
source("tools/DataSplitTools.R")
source("tools/GeneralizedNadarayaWatson.R")
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "oposition", "small", "not_voted")
# head(df)
df <- df[df$math != 0,]
cv_split <- cross_validation_split(df)
part1 <- cv_split[[1]]
part2 <- cv_split[[2]]
remove(cv_split)
Xtrain <- as.vector(part1[, "math"])
Ytrain <- as.vector(part1[, "ukr"])
Wtrain <- as.matrix(part1[, -c(1, 2)])
Xtest <- as.vector(part2[, "math"])
gnw <- GeneralisedNadarayaWatson$new()
gnw$train(Xtrain, Ytrain, Wtrain)
gnw$run_cluster()
prediction1 <- gnw$predict_in_parallel(Xtest, 1)
gnw$stop_cluster()
rownames(prediction1) <- rownames(part2)
write.csv(prediction1, file = "/home/administrator/workplace/univ/zno_project/pred1.csv")
prediction1 <- read.csv("/home/administrator/workplace/univ/zno_project/pred1.csv", row.names = 1)
head(prediction1)
head(df)
Wtest <- part1[, -c(1, 2)]
Wtest[, "max_value"] <- apply(Wtest, 1, max)
Wtest <- as.data.frame(part1[, -c(1, 2)])
Wtest[, "max_value"] <- apply(Wtest, 1, max)
pro_ukr <- part2[Wtest[, "pro_ukr"] == Wtest["max_value"], ]
head(pro_ukr)
radical <- part2[Wtest[, "radical"] == Wtest["max_value"], ]
head(radical
)
radical <- part2[Wtest[, "radical"] == Wtest["max_value"], ]
head(radical)
max(part1[, "radica"])
max(part1[, "radical"])
max(part2[, "radical"])
min(part2[, "radical"])
opposition <- part2[Wtest[, "oposition"] == Wtest["max_value"], ]
head(opposition)
max(Wtest[, "oposition"])
min(Wtest[, "oposition"])
small <- part2[Wtest[, "small"] == Wtest["max_value"], ]
head(small)
not_voted <- part2[Wtest[, "not_voted"] == Wtest["max_value"], ]
head(not_voted)
plot_ly(data = pro_ukr, x = ~math, y = ~ukr, mode = "markers", type = "scatter") %>%
add_trace(x=pro_ukr[, "math"], y = prediction1[rownames(pro_ukr), 1], name = 'trace 1', mode = 'lines+markers')
plot_ly(data = as.data.frame(pro_ukr), x = ~math, y = ~ukr, mode = "markers", type = "scatter") %>%
add_trace(x=pro_ukr[, "math"], y = prediction1[rownames(pro_ukr), 1], name = 'trace 1', mode = 'lines+markers')
plot_ly(data = as.data.frame(pro_ukr), x = ~math, y = ~ukr, mode = "markers", type = "scatter") %>%
add_trace(x=pro_ukr[, "math"], y = prediction1[rownames(pro_ukr), 1], name = 'trace 1', mode = 'markers')
plot_ly(data = as.data.frame(not_voted), x = ~math, y = ~ukr, mode = "markers", type = "scatter") %>%
add_trace(x=not_voted[, "math"], y = prediction1[rownames(not_voted), 5], name = 'trace 1', mode = 'markers')
source('~/.active-rstudio-document', echo=TRUE)
library("Hmisc")
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(Hmisc)
source("tools/DataSplitTools.R")
source("tools/GeneralizedNadarayaWatson.R")
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "opposition", "small", "not_voted")
df[, -c(1, 2)] <- df[, -c(1, 2)]/100
head(df)
describe(df)
describe(df)
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "opposition", "small", "not_voted")
df[, -c(1, 2)] <- df[, -c(1, 2)]
head(df)
describe(df)
df <- df[df$math != 0,]
describe(df)
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "opposition", "small", "not_voted")
df[, -c(1, 2)] <- df[, -c(1, 2)]
head(df)
describe(df)
plot_ly(x = df[, "math"], type = "histogram")
df <- df[df$math != 0,]
plot_ly(x = df[, "math"], type = "histogram")
plot_ly(data = df, x = ~math, y = ~ukr, mode = "markers", type = "scatter")
W <- as.data.frame(df[, -c(1, 2)])
W[, "max_value"] <- apply(W, 1, max)
pro_ukr <- df[W[, "pro_ukr"] == W["max_value"], ]
head(pro_ukr)
radical <- df[W[, "radical"] == W["max_value"], ]
head(radical)
small <- df[W[, "small"] == W["max_value"], ]
head(small)
not_voted <- df[W[, "not_voted"] == W["max_value"], ]
head(not_voted)
plot_ly(x = df[, "math"], type = "histogram")
small <- df[W[, "small"] == W["max_value"], ]
head(small)
plot_ly(x = pro_ukr[, "math"], type = "histogram")
plot_ly(x = radical[, "math"], type = "histogram")
plot_ly(x = opposition[, "math"], type = "histogram")
opposition <- df[W[, "opposition"] == W["max_value"], ]
head(opposition)
plot_ly(x = opposition[, "math"], type = "histogram")
plot_ly(x = small[, "math"], type = "histogram")
plot_ly(x = not_voted[, "math"], type = "histogram")
plot_ly(x = not_voted[, "ukr"], type = "histogram")
plot_ly(x = pro_ukr[, "ukr"], type = "histogram")
plot_ly(x = not_voted[, "ukr"], type = "histogram")
plot_ly(x = pro_ukr[, "ukr"], type = "histogram")
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(Hmisc)
source("tools/DataSplitTools.R")
source("tools/GeneralizedNadarayaWatson.R")
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "opposition", "small", "not_voted")
df[, -c(1, 2)] <- df[, -c(1, 2)]
head(df)
describe(df)
plot_ly(x = df[, "math"], type = "histogram")
df <- df[df$math != 0,]
plot_ly(data = df, x = ~math, y = ~ukr, mode = "markers", type = "scatter")
plot_ly(x = df[, "math"], type = "histogram")
plot_ly(data = df, x = ~math, y = ~ukr, mode = "markers", type = "scatter")
print(name)
for (name in names(W)){
print(name)
}
W <- as.data.frame(df[, -c(1, 2)])
W[, "max_value"] <- apply(W, 1, max)
for (name in names(W[, -ncol(W)])){
print(name)
}
all_plots <- list()
for (name in names(W[, -ncol(W)])) {
print(name)
d <- df[W[, name] == W["max_value"], ]
all_plots[[name]] <- plot_ly(x = d[, "math"], y = d[, "ukr"], mode = "markers", type = "scatter")
}
all_plots
all_plots
subplot(all_plots)
subplot(all_plots[["pro_ukr"]], all_plots[["radical"]])
all_plots[["radical"]]
for (name in names(W[, -ncol(W)])) {
print(name)
d <- df[W[, name] == W["max_value"], ]
print(d)
all_plots[[name]] <- plot_ly(x = d[, "math"], y = d[, "ukr"], mode = "markers", type = "scatter")
}
subplot(all_plots[["pro_ukr"]], all_plots[["not_voted"]])
all_plots[["pro_ukr"]]
subplot_ly(all_plots[["pro_ukr"]], all_plots[["not_voted"]])
for (name in names(W[, -ncol(W)])) {
print(name)
d <- df[W[, name] == W["max_value"], ]
all_plots[[name]] <- subplot_ly(x = d[, "math"], y = d[, "ukr"], mode = "markers", type = "scatter")
}
all_plots <- list()
plot.new()
for (name in names(W[, -ncol(W)])) {
print(name)
d <- df[W[, name] == W["max_value"], ]
all_plots[[name]] <- plot_ly(x = d[, "math"], y = d[, "ukr"], mode = "markers", type = "scatter")
}
subplot(all_plots[["pro_ukr"]], all_plots[["not_voted"]])
all_plots <- list()
plot.new()
for (name in names(W[, -ncol(W)])) {
print(name)
d <- df[W[, name] == W["max_value"], ]
all_plots[[name]] <- plot(x = d[, "math"], y = d[, "ukr"], mode = "markers", type = "scatter")
}
subplot(all_plots[["pro_ukr"]], all_plots[["not_voted"]])
all_plots <- list()
d <- df[W[, "not_voted"] == W["max_value"], ]
all_plots[["not_voted"]] <- plot_ly(x = d[, "math"], y = d[, "ukr"], mode = "markers", type = "scatter")
all_plots[["not_voted"]]
df %>% dplyr::group_by("pro_ukr", "radical", "opposition", "small", "not_voted") %>% summarise(avg_count = n())
library(plotly)
library(Hmisc)
library(WVPlots)
source("tools/DataSplitTools.R")
source("tools/GeneralizedNadarayaWatson.R")
source("tools/CommonTools.R")
df <- read.csv2(file = "/home/administrator/workplace/univ/ZNOandVoating/input.csv",
header = FALSE, sep = ";", dec = ",")
names(df) <- c("ukr","math", "pro_ukr", "radical", "opposition", "small", "not_voted")
head(df, 3)
library(dplyr)
df %>% dplyr::group_by("pro_ukr", "radical", "opposition", "small", "not_voted") %>% summarise(avg_count = n())
df %>% dplyr::group_by("pro_ukr", "radical", "opposition", "small", "not_voted")
head(df)
head(df[df$not_voted == 52.81, ])
df %>% dplyr::group_by("pro_ukr") %>% summarise(avg_count = n())
head(nrow(df[df$not_voted == 52.81, ]))
df %>% dplyr::group_by("not_voted") %>% summarise(avg_count = n())
df %>% dplyr::group_by("not_voted") %>% count()
df %>% distinct() %>% count()
df %>% distinct() %>% count("ukr")
df %>% distinct("not_voted") %>% count("ukr")
df %>% distinct("not_voted") %>% count()
df %>% distinct("not_voted")
df
df %>% group_by("not_voted")
df %>% group_by("not_voted") %>% count()
nrow(df[df$not_voted == 52.81, ])
distinct(df$not_voted)
distinct(df[, "not_voted"])
df[, "not_voted"] %>% distinct()
as.vector(df[, "not_voted"]) %>% distinct()
as.vector(df[, "not_voted"]) %>% unique()
length(as.vector(df[, "not_voted"]) %>% unique())
as.vector(df[, "not_voted"]) %>% unique()
df %>%
unique() %>%
group_by("not_voted") %>%
summarize(vis_count = n())
df[, -c(1, 2)] %>% unique()
df[, -c(1, 2)] %>% unique() %>% dim()
df %>%
distinct(names(df)[-(1:2)])
df[, -(1:2)] %>% count()
df[, "not_voted"] %>% count()
as.vector(df[, "not_voted"]) %>% count()
df[, "not_voted"]
as.vector(df[, "not_voted"]) %>% count()
df[, -(1:2)]%>%group_by_(.dots=names(dat))%>%dplyr::mutate(Freq=n())
df[, -(1:2)]%>%group_by_(.dots=names(df[, -(1:2)]))%>%dplyr::mutate(Freq=n())
df %>% group_by("not_voted") %>%
summarize(Count = n())
df %>% group_by("not_voted", "radical") %>%
summarize(Count = n())
df[, -(1:2)] %>% duplicated()
df[, -(1:2)] %>% duplicated() %>% df[, -(1:2)]
df[, -(1:2)](df[, -(1:2)] %>% duplicated())
df[(df[, -(1:2)] %>% duplicated()), ]
library(plyr)
library(plyr)
plyr::ddply(.data = df[, -(1:2)], .fun=nrow)
names(df)
plyr::ddply(.data = df, .variables=(pro_ukr, radical, opposition, small, not_voted)
), .fun=nrow)
plyr::ddply(.data = df, .variables=(pro_ukr, radical, opposition, small, not_voted), .fun=nrow)
plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, x = ~V2, type = "hist") %>% layout(title = "Abiturients distribution")
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, x = ~V1, type = "hist") %>% layout(title = "Abiturients distribution")
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, x = ~V1, type = "histogram") %>% layout(title = "Abiturients distribution")
remove(ab)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, x = ~V1, type = "bar") %>% layout(title = "Abiturients distribution")
remove(ab)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, x = ~V1, type = "bar", orientation = 'v') %>% layout(title = "Abiturients distribution")
remove(ab)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, y = ~V1, type = "bar", orientation = 'v') %>% layout(title = "Abiturients distribution")
remove(ab)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, y = ~V1, type = "bar") %>% layout(title = "Abiturients distribution")
remove(ab)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, y = ~V1, type = "bar") %>% layout(title = "Abiturients distribution according regions")
remove(ab)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, y = ~V1, type = "bar") %>% layout(title = "Abiturients distribution according regions", xaxis=list(title=""))
remove(ab)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, y = ~V1, type = "bar") %>% layout(title = "Abiturients distribution according regions", xaxis=list(title=" "))
remove(ab)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, y = ~V1, type = "bar") %>% layout(title = "Abiturients distribution according regions", xaxis=list(title="Region id"), yaxis=list(title=""))
remove(ab)
ab[, "max_value"] <- apply(ab, 1, max)
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
ab[, "max_value"] <- apply(ab, 1, max)
ab
all_plots <- list()
annotations_list <- list()
ab[, "max_value"] <- apply(ab, 1, max)
d_pro_ukr <- ab[W[, "pro_ukr"] == ab["max_value"], ]
all_plots <- list()
annotations_list <- list()
ab[, "max_value"] <- apply(ab, 1, max)
d_pro_ukr <- ab[ab[, "pro_ukr"] == ab["max_value"], ]
d_not_voted <- ab[ab[, "not_voted"] == ab["max_value"], ]
plot_ly(y = d_pro_ukr[, "V1"], type = "bar", name = "pro_ukr") %>%
add_trace(y = d_not_voted[, "V1"], name="not_voted")
ab
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
ab[, "max_value"] <- apply(ab[, -ncol(ab)], 1, max)
ab
d_pro_ukr <- ab[ab[, "pro_ukr"] == ab["max_value"], ]
d_not_voted <- ab[ab[, "not_voted"] == ab["max_value"], ]
plot_ly(y = d_pro_ukr[, "V1"], type = "bar", name = "pro_ukr") %>%
add_trace(y = d_not_voted[, "V1"], name="not_voted")
ab <- plyr::ddply(.data = df, .variables = .(pro_ukr, radical, opposition, small, not_voted), .fun = nrow)
plot_ly(ab, y = ~V1, type = "bar") %>%
layout(title = "Abiturients distribution according regions",
xaxis = list(title = "Region ID"), yaxis = list(title = ""))
# remove(ab)
plot_ly(y = ab[, "pro_ukr"], type = "bar", name = "pro_ukr") %>%
add_trace(y = ab[, "not_voted"], name="not_voted")
plot_ly(y = ab[, "pro_ukr"], type = "bar", name = "pro_ukr") %>%
add_trace(y = ab[, "not_voted"], name="not_voted") %>%
add_trace(y = ab[, "radical"], name="radical")
plot_ly(y = ab[, "pro_ukr"], type = "bar", name = "pro_ukr") %>%
add_trace(y = ab[, "not_voted"], name="not_voted") %>%
add_trace(y = ab[, "radical"], name="radical") %>%
add_trace(y = ab[, "opposition"], name="opposition")
plot_ly(y = ab[, "pro_ukr"], type = "bar", name = "pro_ukr") %>%
add_trace(y = ab[, "not_voted"], name="not_voted") %>%
add_trace(y = ab[, "radical"], name="radical") %>%
add_trace(y = ab[, "opposition"], name="opposition") %>%
add_trace(y = ab[, "small"], name="small")
plot_ly(y = ab[, "pro_ukr"], type = "bar", name = "pro_ukr") %>%
# add_trace(y = ab[, "not_voted"], name="not_voted") %>%
# add_trace(y = ab[, "radical"], name="radical") %>%
# add_trace(y = ab[, "opposition"], name="opposition") %>%
add_trace(y = ab[, "small"], name="small")
plot_ly(y = ab[, "pro_ukr"], type = "bar", name = "pro_ukr") %>%
add_trace(y = ab[, "not_voted"], name="not_voted") %>%
# add_trace(y = ab[, "radical"], name="radical") %>%
# add_trace(y = ab[, "opposition"], name="opposition") %>%
add_trace(y = ab[, "small"], name="small")
plot_ly(y = ab[, "pro_ukr"], type = "bar", name = "pro_ukr") %>%
add_trace(y = ab[, "not_voted"], name="not_voted") %>%
# add_trace(y = ab[, "radical"], name="radical") %>%
add_trace(y = ab[, "opposition"], name="opposition") %>%
add_trace(y = ab[, "small"], name="small")
plot_ly(y = ab[, "pro_ukr"], type = "bar", name = "pro_ukr") %>%
add_trace(y = ab[, "not_voted"], name="not_voted") %>%
add_trace(y = ab[, "radical"], name="radical") %>%
add_trace(y = ab[, "opposition"], name="opposition") %>%
add_trace(y = ab[, "small"], name="small")
library(testthat)
source("tools/MVCweights.R")
source("tools/NadarayaWatson.R")
source("tools/GeneralizedNadarayaWatson.R")
source("tools/DataSplitTools.R")
source("tools/CommonTools.R")
source("tools/metrics.R")
test_results <- test_dir("tests", reporter = "summary")
as.list(A_coeff)
Y_true <- cbind(NaN, 1)
Y_predicted <- cbind(NaN, 1)
A_coeff <- cbind(NaN, 1)
as.list(A_coeff)
library("tools/metrics.R")
library("tools//metrics.R")
