# -------------------
# w - coeff
# -------------------
wcoeff <- function(n){
v <- 1:n
return(cbind(v/n, 1-v/n))
}
w <- wcoeff(1)
w
wd <- data.frame("ukr"=1, "math"=2)
wd
nrow(wd)
t(wd)
try(is.matrix(w))
try(is.matrix(w) | is.data.frame(w))
library(testthat)
source("tools/MVCweights.R")
#--------------------------------
# primitive weights coefficients
#--------------------------------
wcoeff <- function(n){
if (n == 0) {stop("Not valid number of observations")}
v <- 1:n
return(cbind(v/n, 1 - v/n))
}
test_that("Test Gramm_matrix(wcoeff(1))",{
w <- wcoeff(1)
expect_equal(Gramm_matrix(w), rbind(c(1, 0), c(0, 0)))
})
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests/test_MVCweights.R", reporter = "summary")
test_dir("tests/test_MVCweights.R", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests/test_MVCweights.R", reporter = "summary")
library(testthat)
source("tools/test_MVCweights.R")
test_results <- test_dir("tests/test_MVCweights.R", reporter = "summary")
test_results <- test_dir("tests", reporter = "summary")
test_results
c(1, 0)
expect_equal(Gramm_matrix(w), rbind(c(1, 0), c(0, 0)))
Gramm_matrix(c(1, 0))
Gramm_matrix(cbind(1, 0))
is.data.frame(c(1, 0))
is.matrix(c(1, 0))
Gramm_matrix <- function(weights_matrix){
flag <- try(is.matrix(w) | is.data.frame(w))
if (flag == FALSE) {stop("Not appropriate input format")}
nrows <- nrow(weights_matrix)
prod_ <- t(weights_matrix) %*% weights_matrix
return((prod_)/nrows)
}
Gramm_matrix(c(1, 0))
Gramm_matrix(cbind(1, 0))
Gramm_matrix <- function(weights_matrix){
flag <- try(is.matrix(w) | is.data.frame(w))
if (flag == FALSE) {print("a"); stop("Not appropriate input format")}
nrows <- nrow(weights_matrix)
prod_ <- t(weights_matrix) %*% weights_matrix
return((prod_)/nrows)
}
Gramm_matrix(c(1, 0))
Gramm_matrix <- function(weights_matrix){
flag <- try(is.matrix(weights_matrix) | is.data.frame(weights_matrix))
if (flag == FALSE) {print("a"); stop("Not appropriate input format")}
nrows <- nrow(weights_matrix)
prod_ <- t(weights_matrix) %*% weights_matrix
return((prod_)/nrows)
}
Gramm_matrix(c(1, 0))
test_results <- test_dir("tests", reporter = "summary")
test_results <- test_dir("tests", reporter = "summary")
ReporterProgress
ReporterProgress()
test_results <- ReporterProgress("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
w2 <- weights(2)
coeff <- function(n){
if (n == 0) {stop("Not valid number of observations")}
v <- 1:n
return(cbind(v/n, 1 - v/n))
}
w2 <- coeff(2)
w2
sum(w2[, 1]*w2[, 1])/2
sum(w2[, 1]*w2[, 2])/2
sum(w2[, 2]*w2[, 2])/2
w4 <- coeff(4)
w4
sum(w4[, 1] * w4[, 2])/4
sum(w4[, 1] * w4[, 1])/4
sum(w4[, 1] * w4[, 2])/4
sum(w4[, 2] * w4[, 2])/4
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
cbind(0, 1)
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
rbind(0, 1)
wcoeff_three_components <- function(n){
if (n == 0) {stop("Not valid number of observations")}
v <- 1:n
return(cbind(v/n, (1 - v/n)/2, (1 - v/n)/2))
}
wcoeff_three_components(1)
wcoeff_three_components(2)
wcoeff_three_components(3)
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
"%&%" <- function(x, y){paste(x, y, sep="")}
"me" %&% "you"
"me" %&% "you" %&% "call"
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
w2 <- wcoeff_three_components(2)
w2
sum(w2[, 1] * w2[, 1])/2
sum(w2[, 1] * w2[, 2])/2
sum(w2[, 1] * w2[, 2])/2
sum(w2[, 1] * w2[, 3])/2
sum(w2[, 2] * w2[, 2])/2
sum(w2[, 2] * w2[, 3])/2
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
w2 <- wcoeff_three_components(4)
w2
sum(w2[, 1] * w2[, 1])/4
sum(w2[, 1] * w2[, 2])/4
sum(w2[, 1] * w2[, 3])/4
sum(w2[, 2] * w2[, 2])/4
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
df1 <- as.data.frame("ukr" = 1, "math"=0)
df1 <- data.frame("ukr" = 1, "math"=0)
df2 <- data.frame("ukr"=0, "math"=0)
df1 %*% df2
data.frame(0, 1)
list(0, 1)
factor(0, 1)
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
is.numeric(0)
is.numeric(-1)
is.integer(-1)
is.integer(1)
length(NULL)
minor <- function(A, i, j){
flag <- try(is.matrix(A)); flag_ij <- try(is.numeric(i) & is.numeric(j))
if (flag == FALSE | flag_ij == FALSE) {stop("Not appropriate input format")}
if (ncol(A) < 2 | nrow(A) < 2) {stop("Not correct dimension of input matrix")}
if (i <= 0 | j <= 0) {stop("Not correct i,j sign")}
if (length(i) == 0 | length(i) > 1 | length(j) == 0 | length(j) > 1) {stop("Not correct i, j")}
return(as.matrix(A[-i, -j]))
}
minor(cbind(1:1, 1:2))
length(NaN)
length(Na)
length(NA)
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
cbind(0)
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
M <- matrix(1:4, ncol = 2, nrow = 2)
M
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
det(matrix(1:6, 2, 3))
det(matrix(1:4, 2, 2))
det(matrix(1, 1, 1))
matrix(1, 1, 1)
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
12-12
32--35
32-35
8-14
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
9-21
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
8-14
8-14
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
w <- wcoeff_two_components(2)
w
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
wcoeff_three_components <- function(n){
if (n == 0) {stop("Not valid number of observations")}
v <- 1:n
return(cbind(v/n, (1 - v/n)/2, (1 - v/n)/2))
}
wcoeff_three_components <- function(n){
if (n == 0) {stop("Not valid number of observations")}
v <- 1:n
return(cbind(v/n, (1 - v/n)/2, (1 - v/n)/2))
}
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
w3 <- rbind(c(0.2, 0.1, 0.1, 0.1, 0.5),
c(0.2, 0.2, 0.05, 0.05, 0.5),
c(0.2, 0.1, 0.1, 0.2, 0.4))
w3
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
w3
acoeff(w3)
w3 <- rbind(c(0.8, 0.1, 0.1),
c(0.05, 0.90, 0.05),
c(0.2, 0.1, 0.7))
acoeff(w3)
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
is.numeric(c(0, 1))
is.numeric(0)
Epanechnikov <- function(x){
result <- 3/4*(1 - x^2)*(abs(x) <= 1)
return(result)
}
Epanechnikov(matrix(seq(0.1, 1, length.out = 10), 5, 2))
Epanechnikov <- function(x){
if (is.matrix(x) == TRUE) {stop("Not correct input type")}
result <- 3/4*(1 - x^2)*(abs(x) <= 1)
return(result)
}
Epanechnikov(matrix(seq(0.1, 1, length.out = 10), 5, 2))
0.5*3/4
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
Epanechnikov(1)
Epanechnikov(2)
Epanechnikov(0.5)
1-0.25
0.75*3/4
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
Epanechnikov <- function(x){
if (is.matrix(x) == TRUE) {stop("Not correct input type")}
result <- 3/4*(1 - x^2)*(abs(x) <= 1)
return(result)
}
Epanechnikov <- function(x){
if (is.matrix(x) == TRUE) {stop("Not correct input type")}
result <- 3/4*(1 - x^2)*(abs(x) <= 1)
return(result)
}
library(testthat)
source("tools/MVCweights.R")
test_results <- test_dir("tests", reporter = "summary")
try(as.numeric(c(1, 0)))
try(as.numeric(matrix(NA, 2, 5)))
